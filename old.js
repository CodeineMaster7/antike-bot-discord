const {
    Client,
    GatewayIntentBits,
    ActionRowBuilder,
    UserSelectMenuBuilder,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
    ButtonBuilder,
    ButtonStyle,
    REST,
    Routes,
    SlashCommandBuilder,
    ComponentType
  } = require('discord.js');
  
  const mongoose = require('mongoose');
  const { clientId, guildId, token, mongodb } = require('../configs/antinuke.json');
  
  const mongoURI = mongodb;
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
  mongoose.connect(mongoURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
  }).then(() => console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB"))
    .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err));
  
  // –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const userSelectionSchema = new mongoose.Schema({
    userId: String,
    selectedUserId: String,
    reason: String
  });
  const UserSelection = mongoose.model("UserSelection", userSelectionSchema);
  
  const client = new Client({
    intents: [GatewayIntentBits.Guilds],
  });
  
  const commands = [
    new SlashCommandBuilder()
      .setName('anticrash_manage')
      .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π AntiCrash')
  ].map(command => command.toJSON());
  
  const rest = new REST({ version: '10' }).setToken(token);
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
  (async () => {
    try {
      console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (/) –∫–æ–º–∞–Ω–¥...');
      await rest.put(Routes.applicationGuildCommands(clientId, guildId), { body: commands });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (/) –∫–æ–º–∞–Ω–¥—ã.');
    } catch (error) {
      console.error(error);
    }
  })();
  
  client.once('ready', () => {
    console.log('ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤!');
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /anticrash_manage
  client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;
  
    if (interaction.commandName === 'anticrash_manage') {
      const menu = new UserSelectMenuBuilder()
        .setCustomId('select-user')
        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  
      const row = new ActionRowBuilder().addComponents(menu);
  
      await interaction.reply({
        content: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
        components: [row],
        ephemeral: true
      });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (selectmenu)
  client.on('interactionCreate', async interaction => {
    if (!interaction.isUserSelectMenu()) return;
    if (interaction.customId !== 'select-user') return;
  
    const selectedUserId = interaction.values[0];
  
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
    await UserSelection.findOneAndUpdate(
      { userId: interaction.user.id },
      { selectedUserId },
      { upsert: true, new: true }
    );
  
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = new ModalBuilder()
      .setCustomId('user-reason-modal')
      .setTitle('–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞');
  
    const reasonInput = new TextInputBuilder()
      .setCustomId('reason')
      .setLabel('–ü–æ—á–µ–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
      .setStyle(TextInputStyle.Paragraph)
      .setRequired(true);
  
    const row = new ActionRowBuilder().addComponents(reasonInput);
    modal.addComponents(row);
  
    await interaction.showModal(modal);
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (modal)
  client.on('interactionCreate', async interaction => {
    if (!interaction.isModalSubmit()) return;
    if (interaction.customId !== 'user-reason-modal') return;
  
    const reason = interaction.fields.getTextInputValue('reason');
  
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ MongoDB
    await UserSelection.findOneAndUpdate(
      { userId: interaction.user.id },
      { reason },
      { upsert: true, new: true }
    );
  
    // –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmButton = new ButtonBuilder()
      .setCustomId('confirm-action')
      .setLabel('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')
      .setStyle(ButtonStyle.Success);
  
    const cancelButton = new ButtonBuilder()
      .setCustomId('cancel-action')
      .setLabel('‚ùå –û—Ç–º–µ–Ω–∞')
      .setStyle(ButtonStyle.Danger);
  
    const row = new ActionRowBuilder().addComponents(confirmButton, cancelButton);
  
    await interaction.reply({
      content: ‚úÖ –í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nüìå **–ü—Ä–∏—á–∏–Ω–∞**: ${reason}\n\nüîΩ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:,
      components: [row],
      ephemeral: true
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (buttonClick)
  client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;
  
    const userData = await UserSelection.findOne({ userId: interaction.user.id });
  
    if (!userData) {
      return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', ephemeral: true });
    }
  
    if (interaction.customId === 'confirm-action') {
      await interaction.update({ content: ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\nüìå **–¶–µ–ª—å:** <@${userData.selectedUserId}>\nüìå **–ü—Ä–∏—á–∏–Ω–∞:** ${userData.reason}, components: [] });
    }
  
    if (interaction.customId === 'cancel-action') {
      await interaction.update({ content: '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', components: [] });
    }
  });
  
  client.login(token);