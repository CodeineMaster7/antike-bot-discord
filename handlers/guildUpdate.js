const { AuditLogEvent } = require('discord.js');
const { db, antiCrashHandler, removeRoles, checkBot, quarantine, dm } = require('../utils.js');

module.exports = async (client) => {
  client.on('guildUpdate', async (oldGuild, newGuild) => {
    try {
      const fetchedLogs = await newGuild.fetchAuditLogs({ limit: 1, type: AuditLogEvent.GuildUpdate });
      const updateLog = fetchedLogs.entries.first();
      if (!updateLog) return;

      const { executor } = updateLog;
      if (!executor || executor.id === client.user.id) return;

      let action = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞";
      let antiCrashType = "guild_update_other_anti_crash";
      let rollbackData = {}; // –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏ –≥–æ—Ç–æ–≤–∏–º –æ—Ç–∫–∞—Ç
      if (oldGuild.name !== newGuild.name) {
        action = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞";
        antiCrashType = "guild_update_name_anti_crash";
        rollbackData.name = oldGuild.name;
      } 
      if (oldGuild.icon !== newGuild.icon) {
        action = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞";
        antiCrashType = "guild_update_avatar_anti_crash";
        rollbackData.icon = oldGuild.iconURL();
      } 
      if (oldGuild.verificationLevel !== newGuild.verificationLevel) {
        action = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≤–µ—Ä–∫–∏";
        antiCrashType = "guild_update_verification_anti_crash";
        rollbackData.verificationLevel = oldGuild.verificationLevel;
      }

      console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${action} | –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${executor.tag}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞
      const Whitelist = db.model('Whitelist');
      let whitelistDoc = await Whitelist.findOne({ guildId: newGuild.id }).lean();

      if (!whitelistDoc) {
        await Whitelist.create({ guildId: newGuild.id, whitelist: [] });
        whitelistDoc = { whitelist: [] };
      }

      if (whitelistDoc.whitelist.includes(executor.id)) {
        console.log(`‚úÖ ${executor.tag} –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ. –ê–Ω—Ç–∏–∫—Ä–∞—à –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.`);
        return;
      }

      const memberExecutor = await newGuild.members.fetch(executor.id).catch(err => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${executor.id}:`, err);
        return null;
      });

      if (!memberExecutor) return;

      if (!(await antiCrashHandler(memberExecutor, antiCrashType, action))) {
        console.log(`‚õî ${executor.tag} –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∞–Ω–∫—Ü–∏–∏.`);

        const rolesToRemove = memberExecutor.roles.cache.filter(r => r.id !== newGuild.id);
        await Promise.all([
          removeRoles(memberExecutor, rolesToRemove),
          checkBot(memberExecutor),
          quarantine(memberExecutor, rolesToRemove, action),
          dm(memberExecutor, action)
        ]).catch(err => console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ Promise.all:`, err));

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        if (Object.keys(rollbackData).length > 0) {
          await newGuild.edit(rollbackData).catch(err => 
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞:`, err)
          );
          console.log(`üîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.`);
        }
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ guildUpdate:', err);
    }
  });
};