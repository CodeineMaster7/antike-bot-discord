const mongoose = require('mongoose');
const { EmbedBuilder } = require('discord.js');
const config = require('./configs/antinuke.json');

const mongoURI = config.mongodb;

mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));

const db = mongoose.connection;

const whitelistSchema = new mongoose.Schema({
  guildId: { type: String, required: true },
  whitelist: { type: [String], default: [] }
});
const Whitelist = mongoose.model('Whitelist', whitelistSchema);

const backupSchema = new mongoose.Schema({
  userId: { type: String, required: true },
  roles: { type: [String], default: [] },
  quarantine: { type: Boolean, default: false }
});
const Backup = mongoose.model('Backup', backupSchema);

async function isWhitelisted(guildId, userId) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–π—Ç–ª–∏—Å—Ç–∞: ${userId}`);
  const doc = await Whitelist.findOne({ guildId }).lean();
  const result = doc?.whitelist.includes(userId) || false;
  console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–π—Ç–ª–∏—Å—Ç–∞: ${userId} -> ${result ? '–í–∞–π—Ç–ª–∏—Å—Ç' : '–ù–µ –≤–∞–π—Ç–ª–∏—Å—Ç'}`);
  return result;
}

async function checkBot(member) {
  console.log(`ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞: ${member.user.tag} (${member.id})`);
  if (member.user.bot) {
    try {
      console.log(`‚õî –ë–æ—Ç ${member.user.tag} –±—É–¥–µ—Ç –∫–∏–∫–Ω—É—Ç.`);
      await member.kick('Anti-crash: –±–æ—Ç');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –±–æ—Ç–∞:', err);
    }
  }
}

async function removeRoles(member, rolesToRemove) {
    console.log(`‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π —É: ${member.user.tag} (${member.id})`);

    // –ï—Å–ª–∏ rolesToRemove ‚Äî —ç—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    if (rolesToRemove instanceof Map || rolesToRemove instanceof require('discord.js').Collection) {
        rolesToRemove = [...rolesToRemove.values()];
    }

    if (!Array.isArray(rolesToRemove) || rolesToRemove.some(r => !r || !r.id)) {
        console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π.', rolesToRemove);
        return;
    }

    const rolesIDs = rolesToRemove.map(r => r.id);

    await Backup.updateOne(
        { userId: member.id },
        { $set: { roles: rolesIDs, quarantine: false } },
        { upsert: true }
    );

    await member.roles.remove(rolesIDs);
    console.log(`‚úÖ –†–æ–ª–∏ —É–¥–∞–ª–µ–Ω—ã —É: ${member.user.tag}`);
}

async function quarantine(member, removedRoles, action) {
    console.log(`üö® –ö–∞—Ä–∞–Ω—Ç–∏–Ω –¥–ª—è: ${member.user.tag} (${member.id})`);
  
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞
      const quarantineChannelId = config.quarantine_channel;
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ${quarantineChannelId}`);
      
      const quarantineChannel = await member.guild.channels.fetch(quarantineChannelId).catch(err => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: ${err}`);
        return null;
      });
      
      if (!quarantineChannel) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª —Å ID ${quarantineChannelId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }
  
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const groupRoles = {
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": "112233445566778899", // ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä": "998877665544332211", // ID —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        "–£—á–∞—Å—Ç–Ω–∏–∫": "223344556677889900" // ID –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      };

      let userGroup = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
      for (const [groupName, roleId] of Object.entries(groupRoles)) {
        if (member.roles.cache.has(roleId)) {
          userGroup = groupName;
          break;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º embed
      const rolesText = removedRoles?.size ? removedRoles.map(r => r.name).join(', ') : '–ù–µ—Ç';
      console.log(`üîπ –£–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏: ${rolesText}`);
  
      const embed = new EmbedBuilder()
        .setColor(3092790)
        .addFields([
          { name: "> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", value: `„Éª${member} \n„Éª${member.user.tag}\n„Éª**${member.id}**` },
          { name: "> –î–µ–π—Å—Ç–≤–∏–µ:", value: `\`\`\`${action}\`\`\`` },
          { name: "> –£–±—Ä–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:", value: rolesText },
          { name: "> –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", value: `\`\`\`${userGroup}\`\`\`` } // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ —Å –≥—Ä—É–ø–ø–æ–π
        ])
        .setThumbnail(member.user.displayAvatarURL({ dynamic: true }))
        .setAuthor({ name: `üö® –ö–∞—Ä–∞–Ω—Ç–∏–Ω | ${member.guild.name}`, iconURL: member.guild.iconURL({ dynamic: true }) });
  
      await quarantineChannel.send({ embeds: [embed] });
      console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${quarantineChannel.name}`);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await Backup.updateOne(
    { userId: member.id },
    { $set: { quarantine: true } },
    { upsert: true }
  );
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞
  const banRole = await member.guild.roles.fetch(config.ban).catch(err => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–æ–ª–∏ –±–∞–Ω–∞: ${err}`);
    return null;
  });
  
  if (banRole) {
    await member.roles.add(banRole).catch(err => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏ –±–∞–Ω–∞: ${err}`);
    });
  } else {
    console.warn(`‚ö†Ô∏è –†–æ–ª—å —Å ID ${config.ban} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–¥–∞—á—É —Ä–æ–ª–∏.`);
  }
  
  console.log(`‚úÖ ${member.user.tag} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω.`);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ quarantine:', err);
    }
}

async function dm(member, action) {
  console.log(`üì© –û—Ç–ø—Ä–∞–≤–∫–∞ DM: ${member.user.tag} -> ${action}`);
  try {
    const embed = new EmbedBuilder()
      .setColor(3092790)
      .setDescription(`${member}, **–í—ã** –±—ã–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω—ã –∑–∞ **${action}**`)
      .setAuthor({ name: `–ê–Ω—Ç–∏-–∫—Ä–∞—à ${member.guild.name}`, iconURL: member.guild.iconURL({ dynamic: true }) })
      .setThumbnail(member.user.displayAvatarURL({ dynamic: true }));

    await member.send({ embeds: [embed] }).catch(() => {});
    console.log(`‚úÖ DM –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${member.user.tag}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ DM:', err);
  }
}

async function antiCrashHandler(member, permissionField, action) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–∫—Ä–∞—à–∞: ${member.user.tag} (${member.id})`);
    try {
        const antiCrashDocs = await Whitelist.find({}).lean();
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${antiCrashDocs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Whitelist.`);

        let isAllowed = false;
        const roles = member.roles.cache.filter(role => role.id !== member.guild.id); // –ò—Å–∫–ª—é—á–∞–µ–º @everyone

        if (roles.size === 0) {
            console.log(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${member.user.tag} –Ω–µ—Ç —Ä–æ–ª–µ–π (–∫—Ä–æ–º–µ @everyone).`);
            return false;
        }

        for (const role of roles.values()) {
            console.log(`üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏: ${role.name} (${role.id})`);
            for (const group of antiCrashDocs) {
                console.log(`‚û°Ô∏è –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≥—Ä—É–ø–ø–æ–π: ${group._id}`);

                if (role.id === group._id) {
                    const finalResult = group[permissionField];
                    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: ${finalResult}`);

                    if (finalResult === '–ó–∞–ø—Ä–µ—â–µ–Ω–æ') {
                        console.log(`‚õî ${member.user.tag} –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–æ –∏ –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω.`);
                        return true;
                    }
                    if (finalResult === '–†–∞–∑—Ä–µ—à–µ–Ω–æ') {
                        console.log(`‚úÖ ${member.user.tag} –∏–º–µ–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.`);
                        isAllowed = true;
                    }

                    if (!isNaN(finalResult)) {
                        console.log(`‚ö†Ô∏è ${member.user.tag} –∏–º–µ–µ—Ç ${finalResult} –Ω–∞—Ä—É—à–µ–Ω–∏–π.`);
                        await Backup.updateOne(
                            { userId: member.id },
                            { $set: { quarantine: true } },
                            { upsert: true }
                        );

                        if (member.quarantine >= Number(finalResult)) {
                            console.log(`‚õî ${member.user.tag} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∏ –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω.`);
                            return true;
                        } else {
                            console.log(`‚ö†Ô∏è ${member.user.tag} –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç (${finalResult}), –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.`);
                            await dm(member, `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: ${finalResult}`);
                            return false;
                        }
                    }
                }
            }
        }

        console.log(`üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑—Ä–µ—à–µ–Ω: ${isAllowed}`);
        return isAllowed;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ antiCrashHandler:', err);
        return false;
    }
}

module.exports = {
  db,
  Whitelist,
  Backup,
  isWhitelisted,
  checkBot,
  removeRoles,
  quarantine,
  dm,
  antiCrashHandler
};